import { NextResponse } from "next/server";
import { jwtDecode } from "jwt-decode";

// –†–æ–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
const roleRoutes = {
  Admin: ["/admin"],
  Doctor: ["/master"],
  User: ["/"], // —Ç–æ–ª—å–∫–æ /
};

// –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
const publicRoutes = ["/login", "/register"];

export function middleware(req) {
  const token = req.cookies.get("token")?.value;
  const url = req.nextUrl.clone();
  const pathname = req.nextUrl.pathname;

  // ‚ùå –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏ –Ω–µ –Ω–∞ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ login
  if (!token && !publicRoutes.includes(pathname)) {
    url.pathname = "/login";
    return NextResponse.redirect(url);
  }

  // ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
  if (token) {
    try {
      const decoded = jwtDecode(token);
      const role = decoded["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"];

      // üîí –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ø–∞—Å—Ç—å –Ω–∞ /login ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–≤–æ—é —Ä–æ–ª—å-—Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (publicRoutes.includes(pathname)) {
        if (role === "Admin") url.pathname = "/admin";
        else if (role === "Doctor") url.pathname = "/master";
        else url.pathname = "/";
        return NextResponse.redirect(url);
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
      const allowedRoutes = roleRoutes[role] || [];

      const isAllowed = allowedRoutes.some((route) => {
        return pathname === route || pathname.startsWith(route + "/");
      });

      // ‚ùå –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–≤–æ—é –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (!isAllowed) {
        if (role === "Admin") url.pathname = "/admin";
        else if (role === "Doctor") url.pathname = "/master";
        else url.pathname = "/";
        return NextResponse.redirect(url);
      }

    } catch (err) {
      console.error("Invalid token:", err);
      url.pathname = "/login";
      return NextResponse.redirect(url);
    }
  }

  // ‚úÖ –í—Å—ë –æ–∫ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  return NextResponse.next();
}

// export const config = {
//   matcher: ['/((?!api|_next|_vercel|.*\\..*).*)'],
// };
export const config = {
  matcher: [
    "/", "/login", "/register",
    "/admin", "/admin/:path*",
    "/master", "/master/:path*",
  ],
};